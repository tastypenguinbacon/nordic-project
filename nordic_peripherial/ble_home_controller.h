/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.4' (BDS version 1.1.3135.0) */

#ifndef BLE_HOME_CONTROLLER_H__
#define BLE_HOME_CONTROLLER_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief Home_controller event type. */
typedef enum
{ 
    BLE_HOME_CONTROLLER_TEMPERATURE_EVT_NOTIFICATION_ENABLED,  /**< Temperature value notification enabled event. */
    BLE_HOME_CONTROLLER_TEMPERATURE_EVT_NOTIFICATION_DISABLED, /**< Temperature value notification disabled event. */
    BLE_HOME_CONTROLLER_LIGHT_CONTROLLER_EVT_NOTIFICATION_ENABLED,  /**< Light_controller value notification enabled event. */
    BLE_HOME_CONTROLLER_LIGHT_CONTROLLER_EVT_NOTIFICATION_DISABLED, /**< Light_controller value notification disabled event. */
    BLE_HOME_CONTROLLER_LIGHT_CONTROLLER_EVT_WRITE, /**< Light_controller write event. */
} ble_home_controller_evt_type_t;

// Forward declaration of the ble_home_controller_t type.
typedef struct ble_home_controller_s ble_home_controller_t;








/**@brief Temperature structure. */
typedef struct
{
    uint32_t temperature_value;
} ble_home_controller_temperature_t;
/**@brief Light_controller structure. */
typedef struct
{
    uint8_t light;
} ble_home_controller_light_controller_t;

/**@brief Home_controller Service event. */
typedef struct
{
    ble_home_controller_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_home_controller_light_controller_t light_controller; /**< Holds decoded data in Write event handler. */
    } params;
} ble_home_controller_evt_t;

/**@brief Home_controller Service event handler type. */
typedef void (*ble_home_controller_evt_handler_t) (ble_home_controller_t * p_home_controller, ble_home_controller_evt_t * p_evt);

/**@brief Home_controller Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_home_controller_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the Home_controller Service. */
    ble_home_controller_temperature_t ble_home_controller_temperature_initial_value; /**< If not NULL, initial value of the Temperature characteristic. */ 
    ble_home_controller_light_controller_t ble_home_controller_light_controller_initial_value; /**< If not NULL, initial value of the Light_controller characteristic. */ 
} ble_home_controller_init_t;

/**@brief Home_controller Service structure. This contains various status information for the service.*/
struct ble_home_controller_s
{
    ble_home_controller_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Home_controller Service. */
    uint16_t service_handle; /**< Handle of Home_controller Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t temperature_handles; /**< Handles related to the Temperature characteristic. */
    ble_gatts_char_handles_t light_controller_handles; /**< Handles related to the Light_controller characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Home_controller.
 *
 * @param[out]  p_home_controller       Home_controller Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_home_controller_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_home_controller_init(ble_home_controller_t * p_home_controller, const ble_home_controller_init_t * p_home_controller_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_home_controller_on_ble_evt(ble_home_controller_t * p_home_controller, ble_evt_t * p_ble_evt);

/**@brief Function for setting the Temperature.
 *
 * @details Sets a new value of the Temperature characteristic. The new value will be sent
 *          to the client the next time the client reads the Temperature characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_home_controller                 Home_controller Service structure.
 * @param[in]   p_temperature  New Temperature.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_home_controller_temperature_set(ble_home_controller_t * p_home_controller, ble_home_controller_temperature_t * p_temperature);

/**@brief Function for setting the Light_controller.
 *
 * @details Sets a new value of the Light_controller characteristic. The new value will be sent
 *          to the client the next time the client reads the Light_controller characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_home_controller                 Home_controller Service structure.
 * @param[in]   p_light_controller  New Light_controller.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_home_controller_light_controller_set(ble_home_controller_t * p_home_controller, ble_home_controller_light_controller_t * p_light_controller);

#endif //_BLE_HOME_CONTROLLER_H__
